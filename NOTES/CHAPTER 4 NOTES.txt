CHAPTER 4 NOTES
	CRUD APPLICATION IN REST


// Create POST /products
server.post("/products", (req,res)=>{
    console.log(req.body)
    products.push(req.body)
    res.json({type: 'POST'})

})


// Read  GET /products
server.get('/products', (req,res) =>{
    res.json(products)
})

// Read GET /products/:id
server.get('/products/:id', (req,res) =>{
    const id = +req.params.id
    const product = products.find(p=>p.id===id)
    res.json(product)
})


// Update PUT /products/:id         =>  Properties get overwritten, those which are changed remain others get deleted
server.put('/products/:id', (req,res)=>{
    const id = +req.params.id
    const productIndex = products.findIndex(p=>p.id===id)
    products.splice(productIndex, 1, {...req.body, id:id})
    res.status(201).json()
})


// update PATCH /products/:id
server.patch('/products/:id', (req,res)=>{
    const id = +req.params.id
    const productIndex = products.findIndex(p=>p.id===id)
    const product = products[productIndex]
    products.splice(productIndex, 1, {...product, ...req.body})
    res.status(201).json()
})



// Delete DELETE /products/:id

server.delete('/products/:id', (req, res)=>{
    const id = +req.params.id;
    const productIndex = products.findIndex(p=>p.id===id)
    const product = products[productIndex]
    products.splice(productIndex, 1)
    res.status(201).json(product)
})